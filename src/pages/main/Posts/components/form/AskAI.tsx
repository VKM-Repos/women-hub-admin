import { Button } from "@/components/ui/button"

import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Separator } from "@radix-ui/react-dropdown-menu";
import { AlignJustify, Check, PenLine, Wand2 } from "lucide-react"
import React, { useState } from "react";


export type MenuItem = {
  title: string;
  icon?: React.ReactNode;
  link?: string;
  isButton?: boolean;
  condition?: boolean;
  onClick?: (e: any) => void;
};



const menu: MenuItem[] = [
  {
    title: "Improve writing",
    isButton: true,
    icon: <AlignJustify size={14} />,
    onClick: () => { },

  },
  {
    title: "Fix spelling",
    isButton: true,
    icon: <Check size={14} />,
    onClick: () => { },
  },
  {
    title: "Continue story",
    isButton: true,
    icon: <PenLine size={14} />,
    onClick: () => { },
  },
  {
    title: "Translate",
    isButton: true,
    icon: <>
      <svg width="16" height="17" viewBox="0 0 16 17" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
        <path d="M3.33398 3.88766C3.05784 3.88766 2.83398 4.11152 2.83398 4.38766C2.83398 4.66381 3.05784 4.88766 3.33398 4.88766V3.88766ZM7.33398 4.88766C7.61013 4.88766 7.83398 4.66381 7.83398 4.38766C7.83398 4.11152 7.61013 3.88766 7.33398 3.88766V4.88766ZM5.63398 3.83594C5.63398 3.5598 5.41013 3.33594 5.13398 3.33594C4.85784 3.33594 4.63398 3.5598 4.63398 3.83594H5.63398ZM3.55269 7.46788C3.34942 7.65479 3.33616 7.9711 3.52307 8.17437C3.70998 8.37764 4.02628 8.3909 4.22956 8.20399L3.55269 7.46788ZM4.91004 5.26109C4.79339 5.01079 4.49592 4.90246 4.24563 5.01911C3.99533 5.13576 3.887 5.43323 4.00365 5.68352L4.91004 5.26109ZM5.58792 7.63083C5.77936 7.82985 6.09588 7.83599 6.2949 7.64455C6.49391 7.45311 6.50005 7.13659 6.30862 6.93758L5.58792 7.63083ZM8.53911 12.977C8.43291 13.2319 8.55345 13.5246 8.80835 13.6308C9.06325 13.737 9.35599 13.6165 9.46219 13.3616L8.53911 12.977ZM9.55618 11.8359L9.09465 11.6436L9.09464 11.6436L9.55618 11.8359ZM11.8724 13.3616C11.9786 13.6165 12.2714 13.737 12.5263 13.6308C12.7812 13.5246 12.9017 13.2319 12.7955 12.977L11.8724 13.3616ZM11.7785 11.8359L12.24 11.6436L12.24 11.6436L11.7785 11.8359ZM10.6673 9.16927L11.1289 8.97696C11.0512 8.79064 10.8692 8.66927 10.6673 8.66927C10.4655 8.66927 10.2834 8.79064 10.2058 8.97696L10.6673 9.16927ZM8.83398 7.16927C8.83398 7.44541 9.05784 7.66927 9.33398 7.66927C9.61013 7.66927 9.83398 7.44541 9.83398 7.16927H8.83398ZM6.66732 10.3359C6.94346 10.3359 7.16732 10.1121 7.16732 9.83594C7.16732 9.5598 6.94346 9.33594 6.66732 9.33594V10.3359ZM3.16732 11.5026C3.16732 11.2265 2.94346 11.0026 2.66732 11.0026C2.39118 11.0026 2.16732 11.2265 2.16732 11.5026H3.16732ZM2.89202 13.2433L3.30777 12.9656L3.30775 12.9655L2.89202 13.2433ZM3.25989 13.6112L3.5377 13.1955L3.53765 13.1955L3.25989 13.6112ZM5.00065 14.3359C5.27679 14.3359 5.50065 14.1121 5.50065 13.8359C5.50065 13.5598 5.27679 13.3359 5.00065 13.3359V14.3359ZM12.834 5.5026C12.834 5.77875 13.0578 6.0026 13.334 6.0026C13.6101 6.0026 13.834 5.77875 13.834 5.5026H12.834ZM13.1093 3.76184L12.6935 4.03961L12.6935 4.03965L13.1093 3.76184ZM12.7414 3.39398L12.4636 3.8097L12.4636 3.80972L12.7414 3.39398ZM11.0007 2.66927C10.7245 2.66927 10.5007 2.89313 10.5007 3.16927C10.5007 3.44541 10.7245 3.66927 11.0007 3.66927V2.66927ZM3.33398 4.88766H5.13398V3.88766H3.33398V4.88766ZM7.33398 3.88766H6.33398V4.88766H7.33398V3.88766ZM5.13398 4.88766H6.33398V3.88766H5.13398V4.88766ZM5.63398 4.38766V3.83594H4.63398V4.38766H5.63398ZM5.85246 4.25301C5.66669 4.91732 5.26919 5.56983 4.78728 6.16882L5.56641 6.79567C6.09312 6.14101 6.57929 5.36705 6.81551 4.52232L5.85246 4.25301ZM4.22956 8.20399C4.64805 7.81919 5.1278 7.34082 5.56641 6.79568L4.78728 6.16881C4.39067 6.66175 3.94956 7.10296 3.55269 7.46788L4.22956 8.20399ZM5.55726 6.15777C5.43852 6.01855 5.29257 5.83208 5.16454 5.65453C5.02916 5.46679 4.93932 5.3239 4.91004 5.26109L4.00365 5.68352C4.07723 5.84139 4.21881 6.05273 4.35343 6.23942C4.4954 6.4363 4.65802 6.64445 4.79643 6.80672L5.55726 6.15777ZM4.8165 6.82887L5.58792 7.63083L6.30862 6.93758L5.53719 6.13562L4.8165 6.82887ZM9.46219 13.3616L10.0177 12.0282L9.09464 11.6436L8.53911 12.977L9.46219 13.3616ZM12.7955 12.977L12.24 11.6436L11.3169 12.0282L11.8724 13.3616L12.7955 12.977ZM10.0177 12.0282L11.1289 9.36158L10.2058 8.97696L9.09465 11.6436L10.0177 12.0282ZM10.2058 9.36158L11.3169 12.0282L12.24 11.6436L11.1289 8.97696L10.2058 9.36158ZM9.55618 12.3359H11.7785V11.3359H9.55618V12.3359ZM9.83398 7.16927V5.83594H8.83398V7.16927H9.83398ZM9.83398 5.83594C9.83398 4.90726 9.83505 4.16046 9.7563 3.57477C9.67562 2.97469 9.50302 2.46944 9.10173 2.06817L8.39464 2.77528C8.57915 2.95979 8.69945 3.21884 8.76522 3.70802C8.83292 4.21158 8.83398 4.87899 8.83398 5.83594H9.83398ZM9.10173 2.06817C8.70045 1.66689 8.1952 1.4943 7.59513 1.41362C7.00945 1.33488 6.26265 1.33594 5.33398 1.33594V2.33594C6.29092 2.33594 6.95832 2.337 7.46189 2.4047C7.95106 2.47047 8.21012 2.59077 8.39464 2.77528L9.10173 2.06817ZM5.33398 1.33594C4.40531 1.33594 3.6585 1.33488 3.07282 1.41362C2.47274 1.4943 1.9675 1.66689 1.56622 2.06817L2.27332 2.77528C2.45783 2.59077 2.71688 2.47047 3.20606 2.4047C3.70963 2.337 4.37704 2.33594 5.33398 2.33594V1.33594ZM1.56622 2.06817C1.16494 2.46945 0.992344 2.9747 0.911666 3.57477C0.832923 4.16046 0.833984 4.90726 0.833984 5.83594H1.83398C1.83398 4.87899 1.83505 4.21158 1.90275 3.70802C1.96852 3.21883 2.08882 2.95979 2.27332 2.77528L1.56622 2.06817ZM0.833984 5.83594C0.833984 6.7646 0.832923 7.5114 0.911666 8.09709C0.992344 8.69716 1.16494 9.2024 1.56621 9.60369L2.27333 8.89659C2.08882 8.71207 1.96852 8.45302 1.90275 7.96384C1.83505 7.46027 1.83398 6.79287 1.83398 5.83594H0.833984ZM1.56621 9.60369C1.96749 10.005 2.47274 10.1776 3.07281 10.2583C3.6585 10.337 4.40531 10.3359 5.33398 10.3359V9.33594C4.37704 9.33594 3.70963 9.33488 3.20607 9.26717C2.71688 9.2014 2.45784 9.0811 2.27333 8.89659L1.56621 9.60369ZM5.33398 10.3359H6.66732V9.33594H5.33398V10.3359ZM7.16732 11.1693C7.16732 10.2123 7.16838 9.54493 7.23608 9.04137C7.30185 8.55219 7.42215 8.29314 7.60667 8.10862L6.89956 7.40152C6.49828 7.8028 6.32568 8.30805 6.245 8.90812C6.16626 9.49381 6.16732 10.2406 6.16732 11.1693H7.16732ZM7.60667 8.10862C7.79119 7.92411 8.05024 7.80381 8.53942 7.73804C9.04298 7.67033 9.71038 7.66927 10.6673 7.66927V6.66927C9.73865 6.66927 8.99185 6.66821 8.40617 6.74695C7.80609 6.82763 7.30085 7.00024 6.89956 7.40152L7.60667 8.10862ZM10.6673 7.66927C11.6243 7.66927 12.2917 7.67033 12.7952 7.73804C13.2844 7.80381 13.5434 7.92411 13.728 8.10862L14.4351 7.40152C14.0338 7.00024 13.5285 6.82763 12.9285 6.74695C12.3428 6.66821 11.596 6.66927 10.6673 6.66927V7.66927ZM13.728 8.10862C13.9125 8.29314 14.0328 8.55219 14.0986 9.04137C14.1663 9.54493 14.1673 10.2123 14.1673 11.1693H15.1673C15.1673 10.2406 15.1684 9.49381 15.0896 8.90812C15.009 8.30805 14.8364 7.8028 14.4351 7.40152L13.728 8.10862ZM14.1673 11.1693C14.1673 12.1262 14.1663 12.7936 14.0986 13.2972C14.0328 13.7863 13.9125 14.0454 13.728 14.2299L14.4351 14.937C14.8364 14.5357 15.009 14.0305 15.0896 13.4304C15.1684 12.8447 15.1673 12.0979 15.1673 11.1693H14.1673ZM13.728 14.2299C13.5434 14.4144 13.2844 14.5347 12.7952 14.6005C12.2917 14.6682 11.6243 14.6693 10.6673 14.6693V15.6693C11.596 15.6693 12.3428 15.6703 12.9285 15.5916C13.5285 15.5109 14.0338 15.3383 14.4351 14.937L13.728 14.2299ZM10.6673 14.6693C9.71038 14.6693 9.04298 14.6682 8.53942 14.6005C8.05024 14.5347 7.79119 14.4144 7.60667 14.2299L6.89956 14.937C7.30085 15.3383 7.80609 15.5109 8.40617 15.5916C8.99185 15.6703 9.73865 15.6693 10.6673 15.6693V14.6693ZM7.60667 14.2299C7.42215 14.0454 7.30185 13.7863 7.23608 13.2972C7.16838 12.7936 7.16732 12.1262 7.16732 11.1693H6.16732C6.16732 12.0979 6.16626 12.8447 6.245 13.4304C6.32568 14.0305 6.49828 14.5357 6.89956 14.937L7.60667 14.2299ZM2.16732 11.5026C2.16732 11.9604 2.16671 12.3413 2.19797 12.6486C2.23008 12.9642 2.29989 13.2572 2.4763 13.5211L3.30775 12.9655C3.25945 12.8933 3.21691 12.784 3.19284 12.5474C3.16792 12.3025 3.16732 11.9812 3.16732 11.5026H2.16732ZM2.47628 13.5211C2.61004 13.7213 2.78193 13.8932 2.98213 14.027L3.53765 13.1955C3.44668 13.1347 3.36857 13.0566 3.30777 12.9656L2.47628 13.5211ZM2.98208 14.0269C3.24609 14.2033 3.53901 14.2732 3.85466 14.3053C4.16196 14.3365 4.54291 14.3359 5.00065 14.3359V13.3359C4.52209 13.3359 4.20081 13.3353 3.95588 13.3104C3.7193 13.2863 3.61 13.2438 3.5377 13.1955L2.98208 14.0269ZM13.834 5.5026C13.834 5.04486 13.8346 4.66391 13.8033 4.35661C13.7712 4.04096 13.7014 3.74804 13.525 3.48404L12.6935 4.03965C12.7418 4.11195 12.7844 4.22126 12.8085 4.45783C12.8334 4.70276 12.834 5.02404 12.834 5.5026H13.834ZM13.525 3.48408C13.3912 3.28388 13.2194 3.11199 13.0192 2.97823L12.4636 3.80972C12.5546 3.87052 12.6327 3.94864 12.6935 4.03961L13.525 3.48408ZM13.0192 2.97825C12.7552 2.80185 12.4623 2.73204 12.1466 2.69993C11.8394 2.66867 11.4584 2.66927 11.0007 2.66927V3.66927C11.4792 3.66927 11.8005 3.66988 12.0454 3.69479C12.282 3.71886 12.3913 3.7614 12.4636 3.8097L13.0192 2.97825Z" fill="currentColor" />
      </svg>
    </>,
    onClick: () => {},
  },
];

export function AskAI() {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Button className="flex gap-2 items-center justify-center text-txtColor border border-gray-300" variant="outline"> <Wand2 size={16} /> <p>Ask AI</p></Button>
      </PopoverTrigger>
      <PopoverContent className="w-80">
        <div className="relative">
          <div className="w-full h-[80px]  p-2 rounded-[0.5rem]  border-none focus:outline-none bg-txtColor/10">
            {/* <textarea className="pt-6 w-full border-none focus:outline-none bg-transparent" /> */}
            <div className="text-xs  inset-0 flex gap-2 text-txtColor">
              <Wand2 size={15} /> <p>Ask AI to write a post about</p>
            </div>
          </div>
        </div>

        <div className="flex flex-col mt-4">
          {menu.map((item, index) => {
            if (item.condition === false) return null;
            return (
              <React.Fragment key={index}>
                {item.isButton && (
                  <>
                    <li className="flex w-full items-center justify-start gap-2 whitespace-nowrap">
                      <button
                        onClick={(e) => {
                          item.onClick && item.onClick(e);
                          setIsOpen(false);
                        }}
                        className="w-full flex items-center gap-2  text-txtColor hover:text-white relative bg-none hover:bg-blue-600 p-2 cursor-pointer text-xs rounded-sm transition duration-300 ease-in-out hover:no-underline"
                      >
                        {item.icon}
                        {item.title}
                      </button>
                    </li>
                    {index !== menu.length - 1 && <Separator className='bg-gray-300 w-full h-[1px]' />}
                  </>
                ) }
              </React.Fragment>
            );
          })}
        </div>
      </PopoverContent>
    </Popover>
  )
}
